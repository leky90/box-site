{"version":3,"sources":["webpack:///./src/pages/index.jsx"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","react_emotion__WEBPACK_IMPORTED_MODULE_3__","components__WEBPACK_IMPORTED_MODULE_4__","layouts__WEBPACK_IMPORTED_MODULE_5__","PostWrapper","styled","target","Index","_ref","data","edges","allMarkdownRemark","fluidImages","banner","childImageSharp","fluid","console","log","a","createElement","title","map","_ref2","node","key","id","cover","frontmatter","path","date","excerpt","propTypes","PropTypes","shape","arrayOf","string","object","isRequired","tags","array"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAAO,EAAAC,GAAAE,EAAAV,EAAA,KAAAW,EAAAX,EAAAO,EAAAG,GAAAE,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,KAAAc,EAAAd,EAAA,KAQMe,EAAcC,YAAH,OAAAC,OAAA,YAAGD,CAAH,uNAcXE,EAAQ,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACPC,EAAUD,EAAKE,kBAAfD,MACAE,EAAgBH,EAAhBG,YAEJC,EAAS,GAKb,OAJGD,IACDC,EAASD,EAAYE,gBAAgBC,OAEvCC,QAAQC,IAAIJ,GAEVlB,EAAAuB,EAAAC,cAAChB,EAAA,EAAD,KACER,EAAAuB,EAAAC,cAACnB,EAAAkB,EAAD,CAAQE,MAAO,yBACfzB,EAAAuB,EAAAC,cAACjB,EAAA,EAAD,CAAQkB,MAAM,wBAAd,oDACAzB,EAAAuB,EAAAC,cAACf,EAAD,KACGM,EAAMW,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACT5B,EAAAuB,EAAAC,cAACjB,EAAA,EAAD,CACEsB,IAAKD,EAAKE,GACVC,MAAOH,EAAKI,YAAYD,MAAMZ,gBAAgBC,MAC9Ca,KAAML,EAAKI,YAAYC,KACvBR,MAAOG,EAAKI,YAAYP,MACxBS,KAAMN,EAAKI,YAAYE,KACvBC,QAASP,EAAKO,eAQXvB,YAEfA,EAAMwB,UAAY,CAChBtB,KAAMuB,IAAUC,MAAM,CACpBtB,kBAAmBqB,IAAUC,MAAM,CACjCvB,MAAOsB,IAAUE,QACfF,IAAUC,MAAM,CACdV,KAAMS,IAAUC,MAAM,CACpBH,QAASE,IAAUG,OACnBR,YAAaK,IAAUC,MAAM,CAC3BP,MAAOM,IAAUI,OAAOC,WACxBT,KAAMI,IAAUG,OAAOE,WACvBjB,MAAOY,IAAUG,OAAOE,WACxBR,KAAMG,IAAUG,OAAOE,WACvBC,KAAMN,IAAUO,YAGnBF,iBAMJ,IAAM5C,EAAK","file":"component---src-pages-index-jsx-15343ca45f4e60c36304.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport styled from 'react-emotion';\nimport { Header, PostList } from 'components';\nimport { Layout } from 'layouts';\n\nconst PostWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin: 4rem 4rem 1rem 4rem;\n  @media (max-width: 1000px) {\n    margin: 4rem 2rem 1rem 2rem;\n  }\n  @media (max-width: 700px) {\n    margin: 4rem 1rem 1rem 1rem;\n  }\n`;\n\nconst Index = ({ data }) => {  \n  const { edges } = data.allMarkdownRemark;    \n  const { fluidImages } = data;  \n\n  let banner = {}\n  if(fluidImages){\n    banner = fluidImages.childImageSharp.fluid\n  }\n  console.log(banner)\n  return (\n    <Layout>\n      <Helmet title={'Box Co-working Space'} />\n      <Header title=\"Box Co-working Space\">Không gian làm việc chung - Nơi ươm mầm sáng tạo</Header>\n      <PostWrapper>\n        {edges.map(({ node }) => (\n          <PostList\n            key={node.id}\n            cover={node.frontmatter.cover.childImageSharp.fluid}\n            path={node.frontmatter.path}\n            title={node.frontmatter.title}\n            date={node.frontmatter.date}\n            excerpt={node.excerpt}\n          />\n        ))}\n      </PostWrapper>\n    </Layout>\n  );\n};\n\nexport default Index;\n\nIndex.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            excerpt: PropTypes.string,\n            frontmatter: PropTypes.shape({\n              cover: PropTypes.object.isRequired,\n              path: PropTypes.string.isRequired,\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n              tags: PropTypes.array,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      limit: 6\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 75)\n          frontmatter {\n            title\n            path\n            tags\n            date(formatString: \"MM.DD.YYYY\")\n            cover {\n              childImageSharp {\n                fluid(\n                  maxWidth: 1000\n                  quality: 90\n                  traceSVG: { color: \"#2B2B2F\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    fluidImages: file(name: { regex: \"/why-cowork-cover/\" }) {\n      childImageSharp {\n        fluid(maxWidth: 1000, quality: 90, traceSVG: {color: \"#2B2B2F\"}) {\n          base64\n          tracedSVG\n          aspectRatio\n          src\n          srcSet\n          srcWebp\n          srcSetWebp\n          sizes\n          originalImg\n          originalName\n          presentationWidth\n          presentationHeight\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}